{"/home/travis/build/npmtest/node-npmtest-feedparser/test.js":"/* istanbul instrument in package npmtest_feedparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feedparser/lib.npmtest_feedparser.js":"/* istanbul instrument in package npmtest_feedparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_feedparser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_feedparser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-feedparser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-feedparser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_feedparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_feedparser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_feedparser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_feedparser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_feedparser.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_feedparser.__dirname + '/lib.npmtest_feedparser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feedparser/node_modules/feedparser/index.js":"module.exports = require('./lib/feedparser');\n","/home/travis/build/npmtest/node-npmtest-feedparser/node_modules/feedparser/lib/feedparser/index.js":"/**********************************************************************\n node-feedparser - A robust RSS, Atom, RDF parser for node.\n http://github.com/danmactough/node-feedparser\n Copyright (c) 2011-2016 Dan MacTough and contributors\n http://mact.me\n\n**********************************************************************/\n\n/**\n * Module dependencies.\n */\nvar sax = require('sax')\n  , addressparser = require('addressparser')\n  , indexOfObject = require('array-indexofobject')\n  , util = require('util')\n  , TransformStream = require('readable-stream').Transform\n  , _ = require('../utils');\n\n/**\n * FeedParser constructor.\n *\n * Exposes a duplex (transform) stream to parse a feed.\n *\n * Each article/post in the feed will have the following keys:\n *   - title {String}\n *   - description {String}\n *   - summary {String}\n *   - date {Date} (or null)\n *   - pubdate {Date} (or null)\n *   - link {String}\n *   - origlink {String}\n *   - author {String}\n *   - guid {String}\n *   - comments {String}\n *   - image {Object}\n *   - categories {Array}\n *   - source {Object}\n *   - enclosures {Array}\n *   - meta {Object}\n *   - Object.keys(meta):\n *     - #ns {Array} key,value pairs of each namespace declared for the feed\n *     - #type {String} one of 'atom', 'rss', 'rdf'\n *     - #version {String}\n *     - title {String}\n *     - description {String}\n *     - date {Date} (or null)\n *     - pubdate {Date} (or null)\n *     - link {String} i.e., to the website, not the feed\n *     - xmlurl {String} the canonical URL of the feed, as declared by the feed\n *     - author {String}\n *     - language {String}\n *     - image {Object}\n *     - favicon {String}\n *     - copyright {String}\n *     - generator {String}\n *     - categories {Array}\n *\n * @param {Object} options\n * @api public\n */\nfunction FeedParser (options) {\n  if (!(this instanceof FeedParser)) return new FeedParser(options);\n  TransformStream.call(this);\n  this._readableState.objectMode = true;\n  this._readableState.highWaterMark = 16; // max. # of output nodes buffered\n\n  this.init();\n\n  // Parse options\n  this.options = _.assign({}, options);\n  if (!('strict' in this.options)) this.options.strict = false;\n  if (!('normalize' in this.options)) this.options.normalize = true;\n  if (!('addmeta' in this.options)) this.options.addmeta = true;\n  if (!('resume_saxerror' in this.options)) this.options.resume_saxerror = true;\n  if ('MAX_BUFFER_LENGTH' in this.options) {\n    sax.MAX_BUFFER_LENGTH = this.options.MAX_BUFFER_LENGTH; // set to Infinity to have unlimited buffers\n  } else {\n    sax.MAX_BUFFER_LENGTH = 16 * 1024 * 1024; // 16M versus the 64K default\n  }\n  if (this.options.feedurl) this.xmlbase.unshift({ '#name': 'xml', '#': this.options.feedurl});\n\n  // See https://github.com/isaacs/sax-js for more info\n  this.stream = sax.createStream(this.options.strict /* strict mode - no by default */, {lowercase: true, xmlns: true });\n  this.stream.on('error', this.handleSaxError.bind(this));\n  this.stream.on('processinginstruction', this.handleProcessingInstruction.bind(this));\n  this.stream.on('opentag', this.handleOpenTag.bind(this));\n  this.stream.on('closetag',this.handleCloseTag.bind(this));\n  this.stream.on('text', this.handleText.bind(this));\n  this.stream.on('cdata', this.handleText.bind(this));\n  this.stream.on('end', this.handleEnd.bind(this));\n}\nutil.inherits(FeedParser, TransformStream);\n\n/*\n * Initializes the SAX stream\n *\n * Initializes the class-variables\n */\nFeedParser.prototype.init = function (){\n  this.meta = {\n    '#ns': []\n  , '@': []\n  , '#xml': {}\n  };\n  this._emitted_meta = false;\n  this.stack = [];\n  this.xmlbase = [];\n  this.in_xhtml = false;\n  this.xhtml = {}; /* Where to store xhtml elements as associative\n                      array with keys: '#' (containing the text)\n                      and '#name' (containing the XML element name) */\n  this.errors = [];\n};\n\nFeedParser.prototype.handleEnd = function (){\n  // We made it to the end without throwing, but let's make sure we were actually\n  // parsing a feed\n  if (!(this.meta && this.meta['#type'])) {\n    var e = new Error('Not a feed');\n    return this.handleError(e);\n  }\n  this.push(null);\n};\n\nFeedParser.prototype.handleSaxError = function (e) {\n  this.emit('error', e);\n  if (this.options.resume_saxerror) {\n    this.resumeSaxError();\n  }\n};\n\nFeedParser.prototype.resumeSaxError = function () {\n  if (this.stream._parser) {\n    this.stream._parser.error = null;\n    this.stream._parser.resume();\n  }\n};\n\nFeedParser.prototype.handleError = function (e){\n  this.emit('error', e);\n};\n\n// parses the xml declaration, which looks like:\n// <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\nFeedParser.prototype.handleProcessingInstruction = function (node) {\n  if (node.name === 'xml') {\n    this.meta['#xml'] = node.body.trim().split(/\\s+/).reduce(function (map, attr) {\n      if (attr.indexOf('=') >= 0) {\n        var parts = attr.split('=');\n        map[parts[0]] = parts[1] && parts[1].length > 2 && parts[1].match(/^.(.*?).$/)[1];\n      }\n      return map;\n    }, this.meta['#xml']);\n  }\n};\n\nFeedParser.prototype.handleOpenTag = function (node){\n  var n = {};\n  n['#name'] = node.name; // Avoid namespace collissions later...\n  n['#prefix'] = node.prefix; // The current ns prefix\n  n['#local'] = node.local; // The current element name, sans prefix\n  n['#uri'] = node.uri; // The current ns uri\n  n['@'] = {};\n  n['#'] = '';\n\n  if (Object.keys(node.attributes).length) {\n    n['@'] = this.handleAttributes(node.attributes, n['#name']);\n  }\n\n  if (this.in_xhtml && this.xhtml['#name'] != n['#name']) { // We are in an xhtml node\n    // This builds the opening tag, e.g., <div id='foo' class='bar'>\n    this.xhtml['#'] += '<'+n['#name'];\n    Object.keys(n['@']).forEach(function(name){\n      this.xhtml['#'] += ' '+ name +'=\"'+ n['@'][name] + '\"';\n    }, this);\n    this.xhtml['#'] += '>';\n  } else if ( this.stack.length === 0 &&\n              (n['#name'] === 'rss' ||\n              (n['#local'] === 'rdf' && _.nslookup([n['#uri']], 'rdf')) ||\n              (n['#local'] === 'feed'&& _.nslookup([n['#uri']], 'atom')) ) ) {\n    Object.keys(n['@']).forEach(function(name) {\n      var o = {};\n      if (name != 'version') {\n        o[name] = n['@'][name];\n        this.meta['@'].push(o);\n      }\n    }, this);\n    switch(n['#local']) {\n    case 'rss':\n      this.meta['#type'] = 'rss';\n      this.meta['#version'] = n['@']['version'];\n      break;\n    case 'rdf':\n      this.meta['#type'] = 'rdf';\n      this.meta['#version'] = n['@']['version'] || '1.0';\n      break;\n    case 'feed':\n      this.meta['#type'] = 'atom';\n      this.meta['#version'] = n['@']['version'] || '1.0';\n      break;\n    }\n  }\n  this.stack.unshift(n);\n};\n\nFeedParser.prototype.handleCloseTag = function (el){\n  var node = { '#name' : el\n             , '#prefix' : ''\n             , '#local' : '' }\n    , stdEl\n    , item\n    , baseurl\n    ;\n  var n = this.stack.shift();\n  el = el.split(':');\n\n  if (el.length > 1 && el[0] === n['#prefix']) {\n    if (_.nslookup(n['#uri'], 'atom')) {\n      node['#prefix'] = el[0];\n      node['#local'] = el.slice(1).join(':');\n      node['#type'] = 'atom';\n    } else if (_.nslookup(n['#uri'], 'rdf')) {\n      node['#prefix'] = el[0];\n      node['#local'] = el.slice(1).join(':');\n      node['#type'] = 'rdf';\n    } else {\n      node['#prefix'] = _.nsprefix(n['#uri']) || n['#prefix'];\n      node['#local'] = el.slice(1).join(':');\n    }\n  } else {\n    node['#local'] = node['#name'];\n    node['#type'] = _.nsprefix(n['#uri']) || n['#prefix'];\n  }\n  delete n['#name'];\n  delete n['#local'];\n  delete n['#prefix'];\n  delete n['#uri'];\n\n  if (this.xmlbase && this.xmlbase.length) {\n    baseurl = this.xmlbase[0]['#'];\n  }\n\n  if (baseurl && (node['#local'] === 'logo' || node['#local'] === 'icon') && node['#type'] === 'atom') {\n    // Apply xml:base to these elements as they appear\n    // rather than leaving it to the ultimate parser\n    n['#'] = _.resolve(baseurl, n['#']);\n  }\n\n  if (this.xmlbase.length && (el == this.xmlbase[0]['#name'])) {\n    void this.xmlbase.shift();\n  }\n\n  if (this.in_xhtml) {\n    if (node['#name'] == this.xhtml['#name']) { // The end of the XHTML\n\n      // Add xhtml data to the container element\n      n['#'] += this.xhtml['#'].trim();\n      // Clear xhtml nodes from the tree\n      for (var key in n) {\n        if (key != '@' && key != '#') {\n          delete n[key];\n        }\n      }\n      this.xhtml = {};\n      this.in_xhtml = false;\n    } else { // Somewhere in the middle of the XHTML\n      this.xhtml['#'] += '</' + node['#name'] + '>';\n    }\n  }\n\n  if ('#' in n) {\n    if (n['#'].match(/^\\s*$/)) {\n      // Delete text nodes with nothing by whitespace\n      delete n['#'];\n    } else {\n      n['#'] = n['#'].trim();\n      if (Object.keys(n).length === 1) {\n        // If there is only one text node, hoist it\n        n = n['#'];\n      }\n    }\n  }\n\n  if (node['#name'] === 'item' ||\n      node['#name'] === 'entry' ||\n      (node['#local'] === 'item' && (node['#prefix'] === '' || node['#type'] === 'rdf')) ||\n      (node['#local'] == 'entry' && (node['#prefix'] === '' || node['#type'] === 'atom'))) { // We have an article!\n\n    if (!this.meta.title) { // We haven't yet parsed all the metadata\n      _.assign(this.meta, this.handleMeta(this.stack[0], this.meta['#type'], this.options));\n      if (!this._emitted_meta) {\n        this.emit('meta', this.meta);\n        this._emitted_meta = true;\n      }\n    }\n    if (!baseurl && this.xmlbase && this.xmlbase.length) { // handleMeta was able to infer a baseurl without xml:base or options.feedurl\n      n = _.reresolve(n, this.xmlbase[0]['#']);\n    }\n    item = this.handleItem(n, this.meta['#type'], this.options);\n    if (this.options.addmeta) {\n      item.meta = this.meta;\n    }\n    if (this.meta.author && !item.author) item.author = this.meta.author;\n    this.push(item);\n  } else if (!this.meta.title && // We haven't yet parsed all the metadata\n              (node['#name'] === 'channel' ||\n               node['#name'] === 'feed' ||\n               (node['#local'] === 'channel' && (node['#prefix'] === '' || node['#type'] === 'rdf')) ||\n               (node['#local'] === 'feed' && (node['#prefix'] === '' || node['#type'] === 'atom')) ) ) {\n    _.assign(this.meta, this.handleMeta(n, this.meta['#type'], this.options));\n    if (!this._emitted_meta) {\n      this.emit('meta', this.meta);\n      this._emitted_meta = true;\n    }\n  }\n\n  if (this.stack.length > 0) {\n    if (node['#prefix'] && node['#local'] && !node['#type']) {\n      stdEl = node['#prefix'] + ':' + node['#local'];\n    } else if (node['#name'] && node['#type'] && node['#type'] !== this.meta['#type']) {\n      stdEl = node['#name'];\n    } else {\n      stdEl = node['#local'] || node['#name'];\n    }\n    if (!this.stack[0].hasOwnProperty(stdEl)) {\n      this.stack[0][stdEl] = n;\n    } else if (this.stack[0][stdEl] instanceof Array) {\n      this.stack[0][stdEl].push(n);\n    } else {\n      this.stack[0][stdEl] = [this.stack[0][stdEl], n];\n    }\n  }\n};\n\nFeedParser.prototype.handleText = function (text){\n  if (this.in_xhtml) {\n    this.xhtml['#'] += text;\n  } else {\n    if (this.stack.length) {\n      if (this.stack[0] && '#' in this.stack[0]) {\n        this.stack[0]['#'] += text;\n      } else {\n        this.stack[0]['#'] = text;\n      }\n    }\n  }\n};\n\nFeedParser.prototype.handleAttributes = function handleAttributes (attrs, el) {\n  /*\n   * Using the sax.js option { xmlns: true }\n   * attrs is an array of objects (not strings) having the following properties\n   * name - e.g., xmlns:dc or href\n   * value\n   * prefix - the first part of the name of the attribute (before the colon)\n   * local - the second part of the name of the attribute (after the colon)\n   * uri - the uri of the namespace\n   *\n   */\n\n  var basepath = ''\n    , simplifiedAttributes = {}\n    ;\n\n  if (this.xmlbase && this.xmlbase.length) {\n    basepath = this.xmlbase[0]['#'];\n  }\n\n  Object.keys(attrs).forEach(function(key){\n    var attr = attrs[key]\n      , ns = {}\n      , prefix = ''\n      ;\n    if (attr.prefix === 'xmlns') {\n      ns[attr.name] = attr.value;\n      this.meta['#ns'].push(ns);\n    }\n    // If the feed is using a non-default prefix, we'll use it, too\n    // But we force the use of the 'xml' prefix\n    if (attr.uri && attr.prefix && !_.nslookup(attr.uri, attr.prefix) || _.nslookup(attr.uri, 'xml')) {\n      prefix = ( _.nsprefix(attr.uri) || attr.prefix ) + ( attr.local ? ':' : '' );\n    }\n    if (basepath && (attr.local == 'href' || attr.local == 'src' || attr.local == 'uri')) {\n      // Apply xml:base to these elements as they appear\n      // rather than leaving it to the ultimate parser\n      attr.value = _.resolve(basepath, attr.value);\n    } else if (attr.local === 'base' && _.nslookup(attr.uri, 'xml')) {\n      // Keep track of the xml:base for the current node\n      if (basepath) {\n        attr.value = _.resolve(basepath, attr.value);\n      }\n      this.xmlbase.unshift({ '#name': el, '#': attr.value});\n    } else if (attr.name === 'type' && attr.value === 'xhtml') {\n      this.in_xhtml = true;\n      this.xhtml = {'#name': el, '#': ''};\n    }\n    simplifiedAttributes[prefix + attr.local] = attr.value ? attr.value.trim() : '';\n  }, this);\n  return simplifiedAttributes;\n};\n\nFeedParser.prototype.handleMeta = function handleMeta (node, type, options) {\n  if (!type || !node) return {};\n\n  var meta = {}\n    , normalize = !options || (options && options.normalize)\n    ;\n\n  if (normalize) {\n    ['title','description','date', 'pubdate', 'pubDate','link', 'xmlurl', 'xmlUrl','author','language','favicon','copyright','generator'].forEach(function (property){\n      meta[property] = null;\n    });\n    meta.cloud = {};\n    meta.image = {};\n    meta.categories = [];\n  }\n\n  Object.keys(node).forEach(function(name){\n    var el = node[name];\n\n    if (normalize) {\n      switch(name){\n      case('title'):\n        meta.title = _.get(el);\n        break;\n      case('description'):\n      case('subtitle'):\n        meta.description = _.get(el);\n        break;\n      case('pubdate'):\n      case('lastbuilddate'):\n      case('published'):\n      case('modified'):\n      case('updated'):\n      case('dc:date'):\n        var date = _.get(el) ? new Date(_.get(el)) : null;\n        if (!date) break;\n        if (meta.pubdate === null || name == 'pubdate' || name == 'published')\n          meta.pubdate = meta.pubDate = date;\n        if (meta.date === null || name == 'lastbuilddate' || name == 'modified' || name == 'updated')\n          meta.date = date;\n        break;\n      case('link'):\n      case('atom:link'):\n      case('atom10:link'):\n        if (Array.isArray(el)) {\n          el.forEach(function (link){\n            if (link['@']['href']) { // Atom\n              if (_.get(link['@'], 'rel')) {\n                if (link['@']['rel'] == 'alternate') {\n                  if (!meta.link) meta.link = link['@']['href'];\n                }\n                else if (link['@']['rel'] == 'self') {\n                  meta.xmlurl = meta.xmlUrl = link['@']['href'];\n                  if (this.xmlbase && this.xmlbase.length === 0) {\n                    this.xmlbase.unshift({ '#name': 'xml', '#': meta.xmlurl});\n                    this.stack[0] = _.reresolve(this.stack[0], meta.xmlurl);\n                  }\n                }\n                else if (link['@']['rel'] == 'hub' && !(meta.cloud.href || meta.cloud.domain)) {\n                  meta.cloud.type = 'hub';\n                  meta.cloud.href = link['@']['href'];\n                }\n              } else {\n                if (!meta.link) meta.link = link['@']['href'];\n              }\n            } else if (Object.keys(link['@']).length === 0) { // RSS\n              meta.link = _.get(link);\n            }\n            if (meta.link && this.xmlbase && this.xmlbase.length === 0) {\n              this.xmlbase.unshift({ '#name': 'xml', '#': meta.link});\n              this.stack[0] = _.reresolve(this.stack[0], meta.link);\n            }\n          }, this);\n        } else {\n          if (el['@']['href']) { // Atom\n            if (_.get(el['@'], 'rel')) {\n              if (el['@']['rel'] == 'alternate') {\n                if (!meta.link) meta.link = el['@']['href'];\n              }\n              else if (el['@']['rel'] == 'self') {\n                meta.xmlurl = meta.xmlUrl = el['@']['href'];\n                if (this.xmlbase && this.xmlbase.length === 0) {\n                  this.xmlbase.unshift({ '#name': 'xml', '#': meta.xmlurl});\n                  this.stack[0] = _.reresolve(this.stack[0], meta.xmlurl);\n                }\n              }\n              else if (el['@']['rel'] == 'hub' && !(meta.cloud.href || meta.cloud.domain)) {\n                meta.cloud.type = 'hub';\n                meta.cloud.href = el['@']['href'];\n              }\n            } else {\n              meta.link = el['@']['href'];\n            }\n          } else if (Object.keys(el['@']).length === 0) { // RSS\n            if (!meta.link) meta.link = _.get(el);\n          }\n          if (meta.link && this.xmlbase && this.xmlbase.length === 0) {\n            this.xmlbase.unshift({ '#name': 'xml', '#': meta.link});\n            this.stack[0] = _.reresolve(this.stack[0], meta.link);\n          }\n        }\n        break;\n      case('managingeditor'):\n      case('webmaster'):\n      case('author'):\n        var author = {};\n        if (name == 'author') {\n          meta.author = _.get(el.name) || _.get(el.email) || _.get(el.uri);\n        }\n        else if (_.get(el)) {\n          author = addressparser(_.get(el))[0];\n          if (author) {\n            el['name'] = author.name;\n            el['email'] = author.address;\n          }\n          if (meta.author === null || name == 'managingeditor') {\n            meta.author = author.name || author.address || _.get(el);\n          }\n        }\n        break;\n      case('cloud'):\n        // I can't believe someone actually would put two cloud elements in their channel\n        // but it happened\n        // Nevertheless, there can be only one\n        meta.cloud = {}; // This will ensure that rssCloud \"wins\" here,\n                         // If pubsubhubbub is also declared, it's still available\n                         // in the link elements\n        if (Array.isArray(el)) {\n          Object.keys(el[0]['@']).forEach(function (attr) {\n            if (_.has(el[0]['@'], attr)) {\n              meta.cloud[attr] = el[0]['@'][attr];\n            }\n          });\n        }\n        else {\n          Object.keys(el['@']).forEach(function (attr) {\n            if (_.has(el['@'], attr)) {\n              meta.cloud[attr] = el['@'][attr];\n            }\n          });\n        }\n        meta.cloud.type = 'rsscloud';\n        break;\n      case('language'):\n        meta.language = _.get(el);\n        break;\n      case('image'):\n      case('logo'):\n        if (el.url)\n          meta.image.url = _.get(el.url);\n        if (el.title)\n          meta.image.title = _.get(el.title);\n        if (!meta.image.url && _.get(el))\n          meta.image.url = _.get(el);\n        break;\n      case('icon'):\n        meta.favicon = _.get(el);\n        break;\n      case('copyright'):\n      case('rights'):\n      case('dc:rights'):\n        meta.copyright = _.get(el);\n        break;\n      case('generator'):\n        meta.generator = _.get(el);\n        if (_.get(el['@'], 'version'))\n          meta.generator += (meta.generator ? ' ' : '') + 'v' + el['@'].version;\n        if (_.get(el['@'], 'uri'))\n          meta.generator += meta.generator ? ' (' + el['@'].uri + ')' : el['@'].uri;\n        break;\n      case('category'):\n      case('dc:subject'):\n      case('itunes:category'):\n      case('media:category'):\n        /* We handle all the kinds of categories within the switch loop because meta.categories\n         * is an array, unlike the other properties, and therefore can handle multiple values\n         */\n        var _category = ''\n          , _categories = []\n          ;\n        if (Array.isArray(el)) {\n          el.forEach(function (category){\n            var _categoryValue;\n            if ('category' == name && 'atom' == type) {\n              if (category['@'] && (_categoryValue = _.safeTrim(_.get(category['@'], 'term')))) {\n                meta.categories.push(_categoryValue);\n              }\n            }\n            else if ('category' == name && 'rss' == type){\n              if ((_categoryValue = _.safeTrim(_.get(category)))) {\n                meta.categories.push(_categoryValue);\n              }\n            }\n            else if ('dc:subject' == name && (_categoryValue = _.safeTrim(_.get(category)))) {\n              _categories = _categoryValue.split(' ').map(function (cat){ return cat.trim(); });\n              if (_categories.length) {\n                meta.categories = meta.categories.concat(_categories);\n              }\n            }\n            else if ('itunes:category' == name) {\n              if (category['@'] && _.safeTrim(_.get(category['@'], 'text'))) _category = _.safeTrim(_.get(category['@'], 'text'));\n              if (category[name]) {\n                if (Array.isArray(category[name])) {\n                  category[name].forEach(function (subcategory){\n                    var _subcategoryValue;\n                    if (subcategory['@'] && (_subcategoryValue = _.safeTrim(_.get(subcategory['@'], 'text')))) {\n                      meta.categories.push(_category + '/' + _subcategoryValue);\n                    }\n                  });\n                }\n                else if (category[name]['@'] && (_categoryValue = _.safeTrim(_.get(category[name]['@'], 'text')))) {\n                  meta.categories.push(_category + '/' + _categoryValue);\n                }\n              }\n              else if (_category) {\n                meta.categories.push(_category);\n              }\n            }\n            else if ('media:category' == name && (_categoryValue = _.safeTrim(_.get(category)))) {\n              meta.categories.push(_categoryValue);\n            }\n          });\n        } else {\n          if ('category' == name && 'atom' == type) {\n            if ((_category = _.safeTrim(_.get(el['@'], 'term')))) {\n              meta.categories.push(_category);\n            }\n          }\n          else if ('category' == name && 'rss' == type) {\n            if ((_category = _.safeTrim(_.get(el)))) {\n              meta.categories.push(_category);\n            }\n          }\n          else if ('dc:subject' == name && (_category = _.safeTrim(_.get(el)))) {\n            _categories = _category.split(' ').map(function (cat){ return cat.trim(); });\n            if (_categories.length) {\n              meta.categories = meta.categories.concat(_categories);\n            }\n          }\n          else if ('itunes:category' == name) {\n            if (el['@'] && _.safeTrim(_.get(el['@'], 'text'))) _category = _.safeTrim(_.get(el['@'], 'text'));\n            if (el[name]) {\n              if (Array.isArray(el[name])) {\n                el[name].forEach(function (subcategory){\n                  var _subcategoryValue;\n                  if (subcategory['@'] && (_subcategoryValue = _.safeTrim(_.get(subcategory['@'], 'text')))) {\n                    meta.categories.push(_category + '/' + _subcategoryValue);\n                  }\n                });\n              }\n              else if (el[name]['@'] && (_category = _.safeTrim(_.get(el[name]['@'], 'text')))) {\n                meta.categories.push(_category + '/' + _category);\n              }\n            }\n            else if (_category) {\n              meta.categories.push(_category);\n            }\n          }\n          else if ('media:category' == name && (_category = _.safeTrim(_.get(el)))) {\n            meta.categories.push(_.get(el));\n          }\n        }\n        break;\n      } // switch end\n    }\n    // Fill with all native other namespaced properties\n    if (name.indexOf('#') !== 0) {\n      if (~name.indexOf(':')) meta[name] = el;\n      else meta[type + ':' + name] = el;\n    }\n  }, this); // forEach end\n\n  if (normalize) {\n    if (!meta.description) {\n      if (node['itunes:summary']) meta.description = _.get(node['itunes:summary']);\n      else if (node['tagline']) meta.description = _.get(node['tagline']);\n    }\n    if (!meta.author) {\n      if (node['itunes:author']) meta.author = _.get(node['itunes:author']);\n      else if (node['itunes:owner'] && node['itunes:owner']['itunes:name']) meta.author = _.get(node['itunes:owner']['itunes:name']);\n      else if (node['dc:creator']) meta.author = _.get(node['dc:creator']);\n      else if (node['dc:publisher']) meta.author = _.get(node['dc:publisher']);\n    }\n    if (!meta.language) {\n      if (node['@'] && node['@']['xml:lang']) meta.language = _.get(node['@'], 'xml:lang');\n      else if (node['dc:language']) meta.language = _.get(node['dc:language']);\n    }\n    if (!meta.image.url) {\n      if (node['itunes:image']) meta.image.url = _.get(node['itunes:image']['@'], 'href');\n      else if (node['media:thumbnail']) {\n        if (Array.isArray(node['media:thumbnail'])) {\n          node['media:thumbnail'] = node['media:thumbnail'][0];\n        }\n        meta.image.url = _.get(node['media:thumbnail']['@'], 'url');\n      }\n    }\n    if (!meta.copyright) {\n      if (node['media:copyright']) meta.copyright = _.get(node['media:copyright']);\n      else if (node['dc:rights']) meta.copyright = _.get(node['dc:rights']);\n      else if (node['creativecommons:license']) meta.copyright = _.get(node['creativecommons:license']);\n      else if (node['cc:license']) {\n        if (Array.isArray(node['cc:license']) && node['cc:license'][0]['@'] && node['cc:license'][0]['@']['rdf:resource']) {\n          meta.copyright = _.get(node['cc:license'][0]['@'], 'rdf:resource');\n        } else if (node['cc:license']['@'] && node['cc:license']['@']['rdf:resource']) {\n          meta.copyright = _.get(node['cc:license']['@'], 'rdf:resource');\n        }\n      }\n    }\n    if (!meta.generator) {\n      if (node['admin:generatoragent']) {\n        if (Array.isArray(node['admin:generatoragent']) && node['admin:generatoragent'][0]['@'] && node['admin:generatoragent'][0]['@']['rdf:resource']) {\n          meta.generator = _.get(node['admin:generatoragent'][0]['@'], 'rdf:resource');\n        } else if (node['admin:generatoragent']['@'] && node['admin:generatoragent']['@']['rdf:resource']) {\n          meta.generator = _.get(node['admin:generatoragent']['@'], 'rdf:resource');\n        }\n      }\n    }\n    if (meta.categories.length) {\n      meta.categories = _.uniq(meta.categories);\n    }\n    if (!meta.link) {\n      if (meta['atom:id'] && _.get(meta['atom:id']) && /^https?:/.test(_.get(meta['atom:id']))) {\n        meta.link = _.get(meta['atom:id']);\n      }\n    }\n    if (!meta.xmlurl && this.options.feedurl) {\n      meta.xmlurl = meta.xmlUrl = this.options.feedurl;\n    }\n    meta.title = meta.title && _.stripHtml(meta.title);\n    meta.description = meta.description && _.stripHtml(meta.description);\n  }\n\n  return meta;\n};\n\nFeedParser.prototype.handleItem = function handleItem (node, type, options){\n  if (!type || !node) return {};\n\n  var item = {}\n    , normalize = !options || (options && options.normalize)\n    ;\n\n  if (normalize) {\n    ['title','description','summary','date','pubdate','pubDate','link','guid','author','comments', 'origlink'].forEach(function (property){\n      item[property] = null;\n    });\n    item.image = {};\n    item.source = {};\n    item.categories = [];\n    item.enclosures = [];\n  }\n\n  Object.keys(node).forEach(function(name){\n    var el = node[name]\n      , attrs = _.get(el, '@')\n      , enclosure;\n    if (normalize) {\n      switch(name){\n      case('title'):\n        item.title = _.get(el);\n        break;\n      case('description'):\n      case('summary'):\n        item.summary = _.get(el);\n        if (!item.description) item.description = _.get(el);\n        break;\n      case('content'):\n      case('content:encoded'):\n        item.description = _.get(el);\n        break;\n      case('pubdate'):\n      case('published'):\n      case('issued'):\n      case('modified'):\n      case('updated'):\n      case('dc:date'):\n        var date = _.get(el) ? new Date(_.get(el)) : null;\n        if (!date) break;\n        if (item.pubdate === null || name == 'pubdate' || name == 'published' || name == 'issued')\n          item.pubdate = item.pubDate = date;\n        if (item.date === null || name == 'modified' || name == 'updated')\n          item.date = date;\n        break;\n      case('link'):\n        if (Array.isArray(el)) {\n          el.forEach(function (link){\n            if (link['@']['href']) { // Atom\n              if (_.get(link['@'], 'rel')) {\n                if (link['@']['rel'] == 'canonical') item.origlink = link['@']['href'];\n                if (link['@']['rel'] == 'alternate' && (!link['@']['type'] || link['@']['type'] == 'text/html') && !item.link) item.link = link['@']['href'];\n                if (link['@']['rel'] == 'self' && (!link['@']['type'] || link['@']['type'] == 'text/html') && !item.link) item.link = link['@']['href'];\n                if (link['@']['rel'] == 'replies') item.comments = link['@']['href'];\n                if (link['@']['rel'] == 'enclosure') {\n                  enclosure = {};\n                  enclosure.url = link['@']['href'];\n                  enclosure.type = _.get(link['@'], 'type');\n                  enclosure.length = _.get(link['@'], 'length');\n                  if (indexOfObject(item.enclosures, enclosure, ['url', 'type']) === -1) {\n                    item.enclosures.push(enclosure);\n                  }\n                }\n              } else {\n                item.link = link['@']['href'];\n              }\n            } else if (Object.keys(link['@']).length === 0) { // RSS\n              if (!item.link) item.link = _.get(link);\n            }\n          });\n        } else {\n          if (el['@']['href']) { // Atom\n            if (_.get(el['@'], 'rel')) {\n              if (el['@']['rel'] == 'canonical') item.origlink = el['@']['href'];\n              if (el['@']['rel'] == 'alternate' && (!el['@']['type'] || el['@']['type'] == 'text/html') && !item.link) item.link = el['@']['href'];\n              if (el['@']['rel'] == 'self' && (!el['@']['type'] || el['@']['type'] == 'text/html') && !item.link) item.link = el['@']['href'];\n              if (el['@']['rel'] == 'replies') item.comments = el['@']['href'];\n              if (el['@']['rel'] == 'enclosure') {\n                enclosure = {};\n                enclosure.url = el['@']['href'];\n                enclosure.type = _.get(el['@'], 'type');\n                enclosure.length = _.get(el['@'], 'length');\n                if (indexOfObject(item.enclosures, enclosure, ['url', 'type']) === -1) {\n                  item.enclosures.push(enclosure);\n                }\n              }\n            } else {\n              item.link = el['@']['href'];\n            }\n          } else if (Object.keys(el['@']).length === 0) { // RSS\n            if (!item.link) item.link = _.get(el);\n          }\n        }\n        if (!item.guid) item.guid = item.link;\n        break;\n      case('guid'):\n      case('id'):\n        item.guid = _.get(el);\n        // http://cyber.law.harvard.edu/rss/rss.html#ltguidgtSubelementOfLtitemgt\n        // If the guid element has an attribute named \"isPermaLink\" with a value\n        // of true, the reader may assume that it is a permalink to the item,\n        // that is, a url that can be opened in a Web browser, that points to\n        // the full item described by the <item> element.\n        // isPermaLink is optional, its default value is true. If its value is\n        // false, the guid may not be assumed to be a url, or a url to anything\n        // in particular.\n        if (item.guid && type == 'rss' && name == 'guid' && !(attrs.ispermalink && attrs.ispermalink.match(/false/i))) {\n          item.permalink = item.guid;\n        }\n        break;\n      case('author'):\n        var author = {};\n        if (_.get(el)) { // RSS\n          author = addressparser(_.get(el))[0];\n          if (author) {\n            el['name'] = author.name;\n            el['email'] = author.address;\n            item.author = author.name || author.address;\n          }\n          // addressparser failed\n          else {\n            item.author = _.get(el);\n          }\n        } else {\n          item.author = _.get(el.name) || _.get(el.email) || _.get(el.uri);\n        }\n        break;\n      case('dc:creator'):\n        item.author = _.get(el);\n        break;\n      case('comments'):\n        item.comments = _.get(el);\n        break;\n      case('source'):\n        if ('rss' == type) {\n          item.source['title'] = _.get(el);\n          item.source['url'] = _.get(el['@'], 'url');\n        } else if ('atom' == type) {\n          if (el.title && _.get(el.title))\n            item.source['title'] = _.get(el.title);\n          if (el.link && _.get(el.link['@'], 'href'))\n            item.source['url'] = _.get(el.link['@'], 'href');\n        }\n        if (item.source['url'] && !this.meta.xmlurl) {\n          this.meta.xmlurl = this.meta.xmlUrl = item.source['url'];\n          if (this.xmlbase && this.xmlbase.length === 0) {\n            this.xmlbase.unshift({ '#name': 'xml', '#': item.source['url']});\n            this.stack[0] = _.reresolve(this.stack[0], item.source['url']);\n          }\n        }\n        break;\n      case('enclosure'):\n        if (Array.isArray(el)) {\n          el.forEach(function (enc){\n            enclosure = {};\n            enclosure.url = _.get(enc['@'], 'url');\n            enclosure.type = _.get(enc['@'], 'type');\n            enclosure.length = _.get(enc['@'], 'length');\n            if (~indexOfObject(item.enclosures, enclosure, ['url', 'type'])) {\n              item.enclosures.splice(indexOfObject(item.enclosures, enclosure, ['url', 'type']), 1, enclosure);\n            } else {\n              item.enclosures.push(enclosure);\n            }\n          });\n        } else {\n          enclosure = {};\n          enclosure.url = _.get(el['@'], 'url');\n          enclosure.type = _.get(el['@'], 'type');\n          enclosure.length = _.get(el['@'], 'length');\n          if (~indexOfObject(item.enclosures, enclosure, ['url', 'type'])) {\n            item.enclosures.splice(indexOfObject(item.enclosures, enclosure, ['url', 'type']), 1, enclosure);\n          } else {\n            item.enclosures.push(enclosure);\n          }\n        }\n        break;\n      case('media:content'):\n        var optionalAttributes = ['bitrate', 'framerate', 'samplingrate', 'duration', 'height', 'width'];\n        if (Array.isArray(el)) {\n          el.forEach(function (enc){\n            enclosure = {};\n            enclosure.url = _.get(enc['@'], 'url');\n            enclosure.type = _.get(enc['@'], 'type') || _.get(enc['@'], 'medium');\n            enclosure.length = _.get(enc['@'], 'filesize');\n            var index = indexOfObject(item.enclosures, enclosure, ['url', 'type']);\n            if (index !== -1) {\n              enclosure = item.enclosures[index];\n            }\n            optionalAttributes.forEach(function (attribute) {\n              if (!enclosure[attribute] && _.get(enc['@'], attribute)) {\n                enclosure[attribute] = _.get(enc['@'], attribute);\n              }\n            });\n            if (index === -1) {\n              item.enclosures.push(enclosure);\n            }\n          });\n        } else {\n          enclosure = {};\n          enclosure.url = _.get(el['@'], 'url');\n          enclosure.type = _.get(el['@'], 'type') || _.get(el['@'], 'medium');\n          enclosure.length = _.get(el['@'], 'filesize');\n          var index = indexOfObject(item.enclosures, enclosure, ['url', 'type']);\n          if (index !== -1) {\n            enclosure = item.enclosures[index];\n          }\n          optionalAttributes.forEach(function (attribute) {\n            if (!enclosure[attribute] && _.get(el['@'], attribute)) {\n              enclosure[attribute] = _.get(el['@'], attribute);\n            }\n          });\n          if (index === -1) {\n            item.enclosures.push(enclosure);\n          }\n        }\n        break;\n      case('enc:enclosure'): // Can't find this in use for an example to debug. Only example found does not comply with the spec -- can't code THAT!\n        break;\n      case('category'):\n      case('dc:subject'):\n      case('itunes:category'):\n      case('media:category'):\n        /* We handle all the kinds of categories within the switch loop because item.categories\n         * is an array, unlike the other properties, and therefore can handle multiple values\n         */\n        var _category = ''\n          , _categories = []\n          ;\n        if (Array.isArray(el)) {\n          el.forEach(function (category){\n            if ('category' == name && 'atom' == type) {\n              if (category['@'] && _.get(category['@'], 'term')) item.categories.push(_.get(category['@'], 'term'));\n            } else if ('category' == name && _.get(category) && 'rss' == type) {\n              item.categories.push(_.get(category).trim());\n            } else if ('dc:subject' == name && _.get(category)) {\n              _categories = _.get(category).split(' ').map(function (cat){ return cat.trim(); });\n              if (_categories.length) item.categories = item.categories.concat(_categories);\n            } else if ('itunes:category' == name) {\n              if (category['@'] && _.get(category['@'], 'text')) _category = _.get(category['@'], 'text');\n              if (category[name]) {\n                if (Array.isArray(category[name])) {\n                  category[name].forEach(function (subcategory){\n                    if (subcategory['@'] && _.get(subcategory['@'], 'text')) item.categories.push(_category + '/' + _.get(subcategory['@'], 'text'));\n                  });\n                } else {\n                  if (category[name]['@'] && _.get(category[name]['@'], 'text'))\n                    item.categories.push(_category + '/' + _.get(category[name]['@'], 'text'));\n                }\n              } else {\n                item.categories.push(_category);\n              }\n            } else if ('media:category' == name) {\n              item.categories.push(_.get(category));\n            }\n          });\n        } else {\n          if ('category' == name && 'atom' == type) {\n            if (_.get(el['@'], 'term')) item.categories.push(_.get(el['@'], 'term'));\n          } else if ('category' == name && _.get(el) && 'rss' == type) {\n            item.categories.push(_.get(el).trim());\n          } else if ('dc:subject' == name && _.get(el)) {\n            _categories = _.get(el).split(' ').map(function (cat){ return cat.trim(); });\n            if (_categories.length) item.categories = item.categories.concat(_categories);\n          } else if ('itunes:category' == name) {\n            if (el['@'] && _.get(el['@'], 'text')) _category = _.get(el['@'], 'text');\n            if (el[name]) {\n              if (Array.isArray(el[name])) {\n                el[name].forEach(function (subcategory){\n                  if (subcategory['@'] && _.get(subcategory['@'], 'text')) item.categories.push(_category + '/' + _.get(subcategory['@'], 'text'));\n                });\n              } else {\n                if (el[name]['@'] && _.get(el[name]['@'], 'text'))\n                  item.categories.push(_category + '/' + _.get(el[name]['@'], 'text'));\n              }\n            } else {\n              item.categories.push(_category);\n            }\n          } else if ('media:category' == name) {\n            item.categories.push(_.get(el));\n          }\n        }\n        break;\n      case('feedburner:origlink'):\n      case('pheedo:origlink'):\n        if (!item.origlink) {\n          item.origlink = _.get(el);\n        }\n        break;\n      } // switch end\n    }\n    // Fill with all native other namespaced properties\n    if (name.indexOf('#') !== 0) {\n      if (~name.indexOf(':')) item[name] = el;\n      else item[type + ':' + name] = el;\n    }\n  }, this); // forEach end\n\n  if (normalize) {\n    if (!item.description) {\n      if (node['itunes:summary']) item.description = _.get(node['itunes:summary']);\n    }\n    if (!item.author) {\n      if (node['itunes:author']) item.author = _.get(node['itunes:author']);\n      else if (node['itunes:owner'] && node['itunes:owner']['itunes:name']) item.author = _.get(node['itunes:owner']['itunes:name']);\n      else if (node['dc:publisher']) item.author = _.get(node['dc:publisher']);\n    }\n    if (!item.image.url) {\n      if (node['itunes:image']) item.image.url = _.get(node['itunes:image']['@'], 'href');\n      else if (node['media:thumbnail']) {\n        if (Array.isArray(node['media:thumbnail'])) {\n          item.image.url = _.get(node['media:thumbnail'][0]['@'], 'url');\n        } else {\n          item.image.url = _.get(node['media:thumbnail']['@'], 'url');\n        }\n      }\n      else if (node['media:content'] && node['media:content']['media:thumbnail']) item.image.url = _.get(node['media:content']['media:thumbnail']['@'], 'url');\n      else if (node['media:group'] && node['media:group']['media:thumbnail']) item.image.url = _.get(node['media:group']['media:thumbnail']['@'], 'url');\n      else if (node['media:group'] && node['media:group']['media:content'] && node['media:group']['media:content']['media:thumbnail']) item.image.url = _.get(node['media:group']['media:content']['media:thumbnail']['@'], 'url');\n      else if (node['g:image_link']) item.image.url = _.get(node['g:image_link']);\n    }\n    if (item.categories.length) {\n      item.categories = _.uniq(item.categories);\n    }\n    if (!item.link) {\n      if (item.guid && /^https?:/.test(item.guid)) {\n        item.link = item.guid;\n      }\n    }\n    item.title = item.title && _.stripHtml(item.title);\n  }\n  return item;\n};\n\n// Naive Stream API\nFeedParser.prototype._transform = function (data, encoding, done) {\n  try {\n    this.stream.write(data);\n    done();\n  }\n  catch (e) {\n    done(e);\n    this.push(null); // Manually trigger and end, since we can't reliably do any more parsing\n  }\n};\n\nFeedParser.prototype._flush = function (done) {\n  try {\n    this.stream.end();\n    done();\n  }\n  catch (e) {\n    done(e);\n  }\n};\n\nexports = module.exports = FeedParser;\n","/home/travis/build/npmtest/node-npmtest-feedparser/node_modules/feedparser/lib/utils.js":"var URL = require('url')\n  , namespaces = require('./namespaces')\n  ;\n\nexports.has = require('lodash.has');\nexports.assign = require('lodash.assign');\nexports.uniq = require('lodash.uniq');\n\nvar _get = require('lodash.get');\n/**\n * lodash.get, but wrapped to provide a default subkey (a/k/a path) of \"#\"\n * and defaultValue of \"null\"\n *\n * var obj = { '#': 'foo', 'bar': 'baz' };\n *\n * get(obj);\n * // => 'foo'\n *\n * get(obj, 'bar');\n * // => 'baz'\n *\n * @param {Object} obj\n * @param {String} [subkey=\"#\"] By default, use the '#' key, but you may pass any key you like\n * @return Returns the value of the selected key or 'null' if undefined.\n * @private\n */\nfunction get(obj, subkey, defaultValue) {\n  if (!subkey) {\n    subkey = '#';\n  }\n\n  if (!defaultValue) {\n    defaultValue = null;\n  }\n\n  if (Array.isArray(obj)) {\n    return _get(obj[0], subkey, defaultValue);\n  }\n  else {\n    return _get(obj, subkey, defaultValue);\n  }\n}\nexports.get = get;\n\n/**\n * Safely trim a value if it's a String\n * @private\n */\nfunction safeTrim (val) {\n  if (typeof val === 'string') {\n    return val.trim();\n  }\n  return val;\n}\nexports.safeTrim = safeTrim;\n\n/*\n * Expose require('url').resolve\n * @private\n */\nfunction resolve (baseUrl, pathUrl) {\n  return URL.resolve(baseUrl, pathUrl);\n}\nexports.resolve = resolve;\n\n/*\n * Check whether a given namespace URI matches the given default\n *\n * @param {String} URI\n * @param {String} default, e.g., 'atom'\n * @return {Boolean}\n * @private\n */\nfunction nslookup (uri, def) {\n  return namespaces[uri] === def;\n}\nexports.nslookup = nslookup;\n\n/*\n * Return the \"default\" namespace prefix for a given namespace URI\n *\n * @param {String} URI\n * @return {String}\n * @private\n */\nfunction nsprefix (uri) {\n  return namespaces[uri];\n}\nexports.nsprefix = nsprefix;\n\n/*\n * Walk a node and re-resolve the urls using the given baseurl\n *\n * @param {Object} node\n * @param {String} baseurl\n * @return {Object} modified node\n * @private\n */\nfunction reresolve (node, baseurl) {\n  if (!node || !baseurl) {\n    return false; // Nothing to do.\n  }\n\n  function resolveLevel (level) {\n    var els = Object.keys(level);\n    els.forEach(function(el){\n      if (Array.isArray(level[el])) {\n        level[el].forEach(resolveLevel);\n      } else {\n        if (level[el].constructor.name === 'Object') {\n          if (el == 'logo' || el == 'icon') {\n            if ('#' in level[el]) {\n              level[el]['#'] = URL.resolve(baseurl, level[el]['#']);\n            }\n          } else {\n            var attrs = Object.keys(level[el]);\n            attrs.forEach(function(name){\n              if (name == 'href' || name == 'src' || name == 'uri') {\n                if ('string' === typeof level[el][name]) {\n                  level[el][name] = URL.resolve(baseurl, level[el][name]);\n                }\n                else if ('#' in level[el][name]) {\n                  level[el][name]['#'] = URL.resolve(baseurl, level[el][name]['#']);\n                }\n              }\n            });\n          }\n        }\n      }\n    });\n    return level;\n  }\n\n  return resolveLevel(node);\n}\nexports.reresolve = reresolve;\n\n/*\n * Aggressivly strip HTML tags\n * Pulled out of node-resanitize because it was all that was being used\n * and it's way lighter...\n *\n * @param {String} str\n * @private\n */\nfunction stripHtml (str) {\n  return str.replace(/<.*?>/g, '');\n}\n\nexports.stripHtml = stripHtml;\n","/home/travis/build/npmtest/node-npmtest-feedparser/node_modules/feedparser/lib/namespaces.js":"/*\n * Default namespaces\n *\n * Lookup by URI\n */\nmodule.exports = {\n  'http://www.w3.org/2005/Atom'                                    :'atom', // v1.0\n  'http://purl.org/atom/ns#'                                       :'atom', // v0.3\n  'http://www.w3.org/1999/02/22-rdf-syntax-ns#'                    :'rdf',\n  'http://purl.org/rss/1.0/'                                       :'rdf', // rss v1.0\n  'http://my.netscape.com/rdf/simple/0.9/'                         :'rdf', // rss v0.90\n  'http://webns.net/mvcb/'                                         :'admin',\n  'http://creativecommons.org/ns#'                                 :'cc',\n  'http://web.resource.org/cc/'                                    :'cc',\n  'http://purl.org/rss/1.0/modules/content/'                       :'content',\n  'http://backend.userland.com/creativeCommonsRSSModule'           :'creativecommons',\n  'http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html' :'creativecommons',\n  'http://purl.org/dc/elements/1.1/'                               :'dc',\n  'http://purl.org/dc/elements/1.0/'                               :'dc',\n  'http://purl.oclc.org/net/rss_2.0/enc#'                          :'enc',\n  'http://rssnamespace.org/feedburner/ext/1.0'                     :'feedburner',\n  'http://www.bradsoft.com/feeddemon/xmlns/1.0/'                   :'fd', // FeedDemon\n  'http://www.itunes.com/dtds/podcast-1.0.dtd'                     :'itunes',\n  'http://www.w3.org/2003/01/geo/wgs84_pos#'                       :'geo',\n  'http://www.georss.org/georss'                                   :'georss',\n  'http://search.yahoo.com/mrss/'                                  :'media',\n  'http://search.yahoo.com/mrss'                                   :'media', // commonly-used but wrong\n  'http://newsgator.com/schema/extensions'                         :'ng', // NewsGator\n  'http://opml.org/spec2'                                          :'opml', // OPML 2.0\n  'http://www.pheedo.com/namespace/pheedo'                         :'pheedo',\n  'http://purl.org/rss/1.0/modules/syndication/'                   :'syn',\n  'http://feedsync.org/2007/feedsync'                              :'sx', // feedsync (Simple Sharing Extensions) http://feedsyncsamples.codeplex.com/\n  'http://purl.org/rss/1.0/modules/taxonomy/'                      :'taxo',\n  'http://purl.org/syndication/thread/1.0'                         :'thr',\n  'http://www.w3.org/1999/xhtml'                                   :'xhtml',\n  'http://www.w3.org/XML/1998/namespace'                           :'xml'\n};\n","/home/travis/build/npmtest/node-npmtest-feedparser/node_modules/feedparser/test01.js":"var obj = { title: 'I need another test outline',\n  description: '<p>United States</p>\\n\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t<li>Far West</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Alaska</li>\\n\\t\\t\\t\\t\\t\\t<li>California</li>\\n\\t\\t\\t\\t\\t\\t<li>Hawaii</li>\\n\\t\\t\\t\\t\\t\\t<li>Nevada</li>\\n\\t\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t\\t<li>Reno</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Las Vegas</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Ely</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Gerlach</li>\\n\\t\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t\\t<li>Oregon</li>\\n\\t\\t\\t\\t\\t\\t<li>Washington</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Great Plains</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Kansas</li>\\n\\t\\t\\t\\t\\t\\t<li>Nebraska</li>\\n\\t\\t\\t\\t\\t\\t<li>North Dakota</li>\\n\\t\\t\\t\\t\\t\\t<li>Oklahoma</li>\\n\\t\\t\\t\\t\\t\\t<li>South Dakota</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Mid-Atlantic</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Delaware</li>\\n\\t\\t\\t\\t\\t\\t<li>Maryland</li>\\n\\t\\t\\t\\t\\t\\t<li>New Jersey</li>\\n\\t\\t\\t\\t\\t\\t<li>New York</li>\\n\\t\\t\\t\\t\\t\\t<li>Pennsylvania</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Midwest</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Illinois</li>\\n\\t\\t\\t\\t\\t\\t<li>Indiana</li>\\n\\t\\t\\t\\t\\t\\t<li>Iowa</li>\\n\\t\\t\\t\\t\\t\\t<li>Kentucky</li>\\n\\t\\t\\t\\t\\t\\t<li>Michigan</li>\\n\\t\\t\\t\\t\\t\\t<li>Minnesota</li>\\n\\t\\t\\t\\t\\t\\t<li>Missouri</li>\\n\\t\\t\\t\\t\\t\\t<li>Ohio</li>\\n\\t\\t\\t\\t\\t\\t<li>West Virginia</li>\\n\\t\\t\\t\\t\\t\\t<li>Wisconsin</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Mountains</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Colorado</li>\\n\\t\\t\\t\\t\\t\\t<li>Idaho</li>\\n\\t\\t\\t\\t\\t\\t<li>Montana</li>\\n\\t\\t\\t\\t\\t\\t<li>Utah</li>\\n\\t\\t\\t\\t\\t\\t<li>Wyoming</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>New England</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Connecticut</li>\\n\\t\\t\\t\\t\\t\\t<li>Maine</li>\\n\\t\\t\\t\\t\\t\\t<li>Massachusetts</li>\\n\\t\\t\\t\\t\\t\\t<li>New Hampshire</li>\\n\\t\\t\\t\\t\\t\\t<li>Rhode Island</li>\\n\\t\\t\\t\\t\\t\\t<li>Vermont</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>South</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Alabama</li>\\n\\t\\t\\t\\t\\t\\t<li>Arkansas</li>\\n\\t\\t\\t\\t\\t\\t<li>Florida</li>\\n\\t\\t\\t\\t\\t\\t<li>Georgia</li>\\n\\t\\t\\t\\t\\t\\t<li>Louisiana</li>\\n\\t\\t\\t\\t\\t\\t<li>Mississippi</li>\\n\\t\\t\\t\\t\\t\\t<li>North Carolina</li>\\n\\t\\t\\t\\t\\t\\t<li>South Carolina</li>\\n\\t\\t\\t\\t\\t\\t<li>Tennessee</li>\\n\\t\\t\\t\\t\\t\\t<li>Virginia</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Southwest</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Arizona</li>\\n\\t\\t\\t\\t\\t\\t<li>New Mexico</li>\\n\\t\\t\\t\\t\\t\\t<li>Texas</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t</ul>',\n  summary: '<p>United States</p>\\n\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t<li>Far West</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Alaska</li>\\n\\t\\t\\t\\t\\t\\t<li>California</li>\\n\\t\\t\\t\\t\\t\\t<li>Hawaii</li>\\n\\t\\t\\t\\t\\t\\t<li>Nevada</li>\\n\\t\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t\\t<li>Reno</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Las Vegas</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Ely</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Gerlach</li>\\n\\t\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t\\t<li>Oregon</li>\\n\\t\\t\\t\\t\\t\\t<li>Washington</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Great Plains</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Kansas</li>\\n\\t\\t\\t\\t\\t\\t<li>Nebraska</li>\\n\\t\\t\\t\\t\\t\\t<li>North Dakota</li>\\n\\t\\t\\t\\t\\t\\t<li>Oklahoma</li>\\n\\t\\t\\t\\t\\t\\t<li>South Dakota</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Mid-Atlantic</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Delaware</li>\\n\\t\\t\\t\\t\\t\\t<li>Maryland</li>\\n\\t\\t\\t\\t\\t\\t<li>New Jersey</li>\\n\\t\\t\\t\\t\\t\\t<li>New York</li>\\n\\t\\t\\t\\t\\t\\t<li>Pennsylvania</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Midwest</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Illinois</li>\\n\\t\\t\\t\\t\\t\\t<li>Indiana</li>\\n\\t\\t\\t\\t\\t\\t<li>Iowa</li>\\n\\t\\t\\t\\t\\t\\t<li>Kentucky</li>\\n\\t\\t\\t\\t\\t\\t<li>Michigan</li>\\n\\t\\t\\t\\t\\t\\t<li>Minnesota</li>\\n\\t\\t\\t\\t\\t\\t<li>Missouri</li>\\n\\t\\t\\t\\t\\t\\t<li>Ohio</li>\\n\\t\\t\\t\\t\\t\\t<li>West Virginia</li>\\n\\t\\t\\t\\t\\t\\t<li>Wisconsin</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Mountains</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Colorado</li>\\n\\t\\t\\t\\t\\t\\t<li>Idaho</li>\\n\\t\\t\\t\\t\\t\\t<li>Montana</li>\\n\\t\\t\\t\\t\\t\\t<li>Utah</li>\\n\\t\\t\\t\\t\\t\\t<li>Wyoming</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>New England</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Connecticut</li>\\n\\t\\t\\t\\t\\t\\t<li>Maine</li>\\n\\t\\t\\t\\t\\t\\t<li>Massachusetts</li>\\n\\t\\t\\t\\t\\t\\t<li>New Hampshire</li>\\n\\t\\t\\t\\t\\t\\t<li>Rhode Island</li>\\n\\t\\t\\t\\t\\t\\t<li>Vermont</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>South</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Alabama</li>\\n\\t\\t\\t\\t\\t\\t<li>Arkansas</li>\\n\\t\\t\\t\\t\\t\\t<li>Florida</li>\\n\\t\\t\\t\\t\\t\\t<li>Georgia</li>\\n\\t\\t\\t\\t\\t\\t<li>Louisiana</li>\\n\\t\\t\\t\\t\\t\\t<li>Mississippi</li>\\n\\t\\t\\t\\t\\t\\t<li>North Carolina</li>\\n\\t\\t\\t\\t\\t\\t<li>South Carolina</li>\\n\\t\\t\\t\\t\\t\\t<li>Tennessee</li>\\n\\t\\t\\t\\t\\t\\t<li>Virginia</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Southwest</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Arizona</li>\\n\\t\\t\\t\\t\\t\\t<li>New Mexico</li>\\n\\t\\t\\t\\t\\t\\t<li>Texas</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t</ul>',\n  date: new Date('Thu Oct 16 2014 13:25:11 GMT-0400 (EDT)'),\n  pubdate: new Date('Thu Oct 16 2014 13:25:11 GMT-0400 (EDT)'),\n  pubDate: new Date('Thu Oct 16 2014 13:25:11 GMT-0400 (EDT)'),\n  link: 'http://scripting.com/2014/10/16/#a1413480311',\n  guid: 'http://scripting.com/2014/10/16/#a1413480311',\n  author: 'dave.winer@gmail.com',\n  comments: null,\n  origlink: null,\n  image: {},\n  source: {},\n  categories: [],\n  enclosures: [],\n  'rss:@': {},\n  'rss:title': { '@': {}, '#': 'I need another test outline' },\n  'rss:link': { '@': {}, '#': 'http://scripting.com/2014/10/16/#a1413480311' },\n  'rss:description':\n   { '@': {},\n     '#': '<p>United States</p>\\n\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t<li>Far West</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Alaska</li>\\n\\t\\t\\t\\t\\t\\t<li>California</li>\\n\\t\\t\\t\\t\\t\\t<li>Hawaii</li>\\n\\t\\t\\t\\t\\t\\t<li>Nevada</li>\\n\\t\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t\\t<li>Reno</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Las Vegas</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Ely</li>\\n\\t\\t\\t\\t\\t\\t\\t<li>Gerlach</li>\\n\\t\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t\\t<li>Oregon</li>\\n\\t\\t\\t\\t\\t\\t<li>Washington</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Great Plains</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Kansas</li>\\n\\t\\t\\t\\t\\t\\t<li>Nebraska</li>\\n\\t\\t\\t\\t\\t\\t<li>North Dakota</li>\\n\\t\\t\\t\\t\\t\\t<li>Oklahoma</li>\\n\\t\\t\\t\\t\\t\\t<li>South Dakota</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Mid-Atlantic</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Delaware</li>\\n\\t\\t\\t\\t\\t\\t<li>Maryland</li>\\n\\t\\t\\t\\t\\t\\t<li>New Jersey</li>\\n\\t\\t\\t\\t\\t\\t<li>New York</li>\\n\\t\\t\\t\\t\\t\\t<li>Pennsylvania</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Midwest</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Illinois</li>\\n\\t\\t\\t\\t\\t\\t<li>Indiana</li>\\n\\t\\t\\t\\t\\t\\t<li>Iowa</li>\\n\\t\\t\\t\\t\\t\\t<li>Kentucky</li>\\n\\t\\t\\t\\t\\t\\t<li>Michigan</li>\\n\\t\\t\\t\\t\\t\\t<li>Minnesota</li>\\n\\t\\t\\t\\t\\t\\t<li>Missouri</li>\\n\\t\\t\\t\\t\\t\\t<li>Ohio</li>\\n\\t\\t\\t\\t\\t\\t<li>West Virginia</li>\\n\\t\\t\\t\\t\\t\\t<li>Wisconsin</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Mountains</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Colorado</li>\\n\\t\\t\\t\\t\\t\\t<li>Idaho</li>\\n\\t\\t\\t\\t\\t\\t<li>Montana</li>\\n\\t\\t\\t\\t\\t\\t<li>Utah</li>\\n\\t\\t\\t\\t\\t\\t<li>Wyoming</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>New England</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Connecticut</li>\\n\\t\\t\\t\\t\\t\\t<li>Maine</li>\\n\\t\\t\\t\\t\\t\\t<li>Massachusetts</li>\\n\\t\\t\\t\\t\\t\\t<li>New Hampshire</li>\\n\\t\\t\\t\\t\\t\\t<li>Rhode Island</li>\\n\\t\\t\\t\\t\\t\\t<li>Vermont</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>South</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Alabama</li>\\n\\t\\t\\t\\t\\t\\t<li>Arkansas</li>\\n\\t\\t\\t\\t\\t\\t<li>Florida</li>\\n\\t\\t\\t\\t\\t\\t<li>Georgia</li>\\n\\t\\t\\t\\t\\t\\t<li>Louisiana</li>\\n\\t\\t\\t\\t\\t\\t<li>Mississippi</li>\\n\\t\\t\\t\\t\\t\\t<li>North Carolina</li>\\n\\t\\t\\t\\t\\t\\t<li>South Carolina</li>\\n\\t\\t\\t\\t\\t\\t<li>Tennessee</li>\\n\\t\\t\\t\\t\\t\\t<li>Virginia</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t<li>Southwest</li>\\n\\t\\t\\t\\t\\t<ul>\\n\\t\\t\\t\\t\\t\\t<li>Arizona</li>\\n\\t\\t\\t\\t\\t\\t<li>New Mexico</li>\\n\\t\\t\\t\\t\\t\\t<li>Texas</li>\\n\\t\\t\\t\\t\\t\\t</ul>\\n\\t\\t\\t\\t\\t</ul>' },\n  'source:outline':\n   { '@':\n      { text: 'I need another test outline',\n        created: 'Thu, 16 Oct 2014 17:25:11 GMT',\n        type: 'idea',\n        name: 'iNeedAnotherTestOutline' },\n     'source:outline':\n      { '@': { text: 'United States' },\n        'source:outline':\n         [ { '@': { text: 'Far West' },\n             'source:outline':\n              [ { '@': { text: 'Alaska' } },\n                { '@': { text: 'California' } },\n                { '@': { text: 'Hawaii' } },\n                { '@': { text: 'Nevada' },\n                  'source:outline':\n                   [ { '@': { text: 'Reno', created: 'Tue, 12 Jul 2005 23:56:35 GMT' } },\n                     { '@': { text: 'Las Vegas', created: 'Tue, 12 Jul 2005 23:56:37 GMT' } },\n                     { '@': { text: 'Ely', created: 'Tue, 12 Jul 2005 23:56:39 GMT' } },\n                     { '@': { text: 'Gerlach', created: 'Tue, 12 Jul 2005 23:56:47 GMT' } } ] },\n                { '@': { text: 'Oregon' } },\n                { '@': { text: 'Washington' } } ] },\n           { '@': { text: 'Great Plains' },\n             'source:outline':\n              [ { '@': { text: 'Kansas' } },\n                { '@': { text: 'Nebraska' } },\n                { '@': { text: 'North Dakota' } },\n                { '@': { text: 'Oklahoma' } },\n                { '@': { text: 'South Dakota' } } ] },\n           { '@': { text: 'Mid-Atlantic' },\n             'source:outline':\n              [ { '@': { text: 'Delaware' } },\n                { '@': { text: 'Maryland' } },\n                { '@': { text: 'New Jersey' } },\n                { '@': { text: 'New York' } },\n                { '@': { text: 'Pennsylvania' } } ] },\n           { '@': { text: 'Midwest' },\n             'source:outline':\n              [ { '@': { text: 'Illinois' } },\n                { '@': { text: 'Indiana' } },\n                { '@': { text: 'Iowa' } },\n                { '@': { text: 'Kentucky' } },\n                { '@': { text: 'Michigan' } },\n                { '@': { text: 'Minnesota' } },\n                { '@': { text: 'Missouri' } },\n                { '@': { text: 'Ohio' } },\n                { '@': { text: 'West Virginia' } },\n                { '@': { text: 'Wisconsin' } } ] },\n           { '@': { text: 'Mountains' },\n             'source:outline':\n              [ { '@': { text: 'Colorado' } },\n                { '@': { text: 'Idaho' } },\n                { '@': { text: 'Montana' } },\n                { '@': { text: 'Utah' } },\n                { '@': { text: 'Wyoming' } } ] },\n           { '@': { text: 'New England' },\n             'source:outline':\n              [ { '@': { text: 'Connecticut' } },\n                { '@': { text: 'Maine' } },\n                { '@': { text: 'Massachusetts' } },\n                { '@': { text: 'New Hampshire' } },\n                { '@': { text: 'Rhode Island' } },\n                { '@': { text: 'Vermont' } } ] },\n           { '@': { text: 'South' },\n             'source:outline':\n              [ { '@': { text: 'Alabama' } },\n                { '@': { text: 'Arkansas' } },\n                { '@': { text: 'Florida' } },\n                { '@': { text: 'Georgia' } },\n                { '@': { text: 'Louisiana' } },\n                { '@': { text: 'Mississippi' } },\n                { '@': { text: 'North Carolina' } },\n                { '@': { text: 'South Carolina' } },\n                { '@': { text: 'Tennessee' } },\n                { '@': { text: 'Virginia' } } ] },\n           { '@': { text: 'Southwest' },\n             'source:outline':\n              [ { '@': { text: 'Arizona' } },\n                { '@': { text: 'New Mexico' } },\n                { '@': { text: 'Texas' } } ] } ] } },\n  'rss:pubdate': { '@': {}, '#': 'Thu, 16 Oct 2014 17:25:11 GMT' },\n  permalink: 'http://scripting.com/2014/10/16/#a1413480311',\n  'rss:guid': { '@': {}, '#': 'http://scripting.com/2014/10/16/#a1413480311' },\n  meta:\n   { '#ns': [ { 'xmlns:source': 'http://source.smallpict.com/2014/07/12/theSourceNamespace.html' } ],\n     '@': [ { 'xmlns:source': 'http://source.smallpict.com/2014/07/12/theSourceNamespace.html' } ],\n     '#xml': { version: '1.0' },\n     '#type': 'rss',\n     '#version': '2.0',\n     title: 'Scripting News',\n     description: 'Dave Winer\\'s weblog, started in April 1997, bootstrapped the blogging revolution.',\n     date: new Date('Thu Oct 16 2014 19:27:07 GMT-0400 (EDT)'),\n     pubdate: new Date('Thu Oct 16 2014 19:27:07 GMT-0400 (EDT)'),\n     pubDate: new Date('Thu Oct 16 2014 19:27:07 GMT-0400 (EDT)'),\n     link: 'http://scripting.com/',\n     xmlurl: null,\n     xmlUrl: null,\n     author: 'dave.winer@gmail.com',\n     language: 'en-us',\n     favicon: null,\n     copyright: null,\n     generator: 'Fargo v1.68',\n     cloud: {},\n     image: {},\n     categories: [],\n     'rss:@': {},\n     'rss:title': { '@': {}, '#': 'Scripting News' },\n     'rss:link': { '@': {}, '#': 'http://scripting.com/' },\n     'rss:description':\n      { '@': {},\n        '#': 'Dave Winer\\'s weblog, started in April 1997, bootstrapped the blogging revolution.' },\n     'rss:pubdate': { '@': {}, '#': 'Thu, 16 Oct 2014 23:27:07 GMT' },\n     'rss:lastbuilddate': { '@': {}, '#': 'Thu, 16 Oct 2014 23:27:07 GMT' },\n     'rss:language': { '@': {}, '#': 'en-us' },\n     'rss:generator': { '@': {}, '#': 'Fargo v1.68' },\n     'rss:docs': { '@': {}, '#': 'http://cyber.law.harvard.edu/rss/rss.html' },\n     'rss:webmaster':\n      { '@': {},\n        '#': 'dave.winer@gmail.com',\n        name: '',\n        email: 'dave.winer@gmail.com' },\n     'source:account':\n      [ { '@': { service: 'twitter' }, '#': 'davewiner' },\n        { '@': { service: 'facebook' }, '#': 'dave.winer.12' } ] } };\n\nfunction convertOutline(jstruct) { //7/16/14 by DW\n    var theNewOutline = {},\n        atts, subs;\n    if (jstruct[\"source:outline\"] != undefined) {\n        if (jstruct[\"@\"] != undefined) {\n            atts = jstruct[\"@\"];\n            subs = jstruct[\"source:outline\"];\n        } else {\n            atts = jstruct[\"source:outline\"][\"@\"];\n            subs = jstruct[\"source:outline\"][\"source:outline\"];\n        }\n    } else {\n        atts = jstruct[\"@\"];\n        subs = undefined;\n    }\n    for (var x in atts) {\n        theNewOutline[x] = atts[x];\n    }\n    if (subs != undefined) {\n        theNewOutline.subs = [];\n        if (subs instanceof Array) {\n            for (var i = 0; i < subs.length; i++) {\n                theNewOutline.subs[i] = convertOutline(subs[i]);\n            }\n        } else {\n            theNewOutline.subs = [];\n            theNewOutline.subs[0] = {};\n            for (var x in subs[\"@\"]) {\n                theNewOutline.subs[0][x] = subs[\"@\"][x];\n            }\n            theNewOutline.subs[0] = subs;\n        }\n    }\n    return (theNewOutline);\n}\n\nfunction copyScalars (source, dest) { //8/31/14 by DW\n  for (var x in source) { \n    var type, val = source [x];\n    if (val instanceof Date) { \n      val = val.toString ();\n    }\n    type = typeof (val);\n    if ((type != \"object\") && (type != undefined)) {\n      dest [x] = val;\n    }\n  }\n}\n\nfunction newConvertOutline(jstruct) {\n    var theNewOutline = {};\n    if (jstruct[\"@\"] != undefined) {\n        copyScalars(jstruct[\"@\"], theNewOutline);\n    }\n    if (jstruct[\"source:outline\"] != undefined) {\n        if (jstruct[\"source:outline\"] instanceof Array) {\n            var theArray = jstruct[\"source:outline\"];\n            theNewOutline.subs = [];\n            for (var i = 0; i < theArray.length; i++) {\n                theNewOutline.subs[theNewOutline.subs.length] = newConvertOutline(theArray[i]);\n            }\n        } else {\n            theNewOutline.subs = [\n                newConvertOutline(jstruct[\"source:outline\"])\n            ];\n        }\n    }\n    return (theNewOutline);\n}\n\nconsole.log(require('util').inspect(convertOutline(obj), null, 10));\nconsole.log(require('util').inspect(newConvertOutline(obj), null, 10));\n\n","/home/travis/build/npmtest/node-npmtest-feedparser/node_modules/feedparser/bin/feedparser.js":"#!/usr/bin/env node\n/*\n * Parse a feed and dump the result to the console\n *\n * Usage: curl <feed url> | bin/feedparser.js\n *        cat <feed file> | bin/feedparser.js\n *\n */\nvar isatty = require('tty').isatty\n  , util = require('util')\n  , FeedParser = require('../');\n\nvar usingConsole = isatty(1) && isatty(2);\n\nprocess.stdin.pipe(new FeedParser())\n  .on('error', console.error)\n  .on('readable', function() {\n    var stream = this, item;\n    while (item = stream.read()) {\n      if (usingConsole) {\n        console.log(util.inspect(item, null, 10, true));\n      }\n      else {\n        console.log(JSON.stringify(item));\n      }\n    }\n  });\n"}